import asyncio
import random
import os
from telethon import TelegramClient, events
from telethon.errors import AuthKeyUnregisteredError
from auth import api_id, api_hash, phone_number
from config import source_chat_ids, target_chat_ids, delay_range

try:
    import socks  # from PySocks
except ImportError:
    print("‚ùå –ú–æ–¥—É–ª—å 'socks' –Ω–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω. –£—Å—Ç–∞–Ω–æ–≤–∏—Ç–µ —á–µ—Ä–µ–∑: pip install pysocks")
    exit(1)

SESSION_NAME = "session"


def load_random_proxy():
    proxies = []
    if not os.path.exists("proxy.txt"):
        return None

    with open("proxy.txt", "r", encoding="utf-8") as f:
        lines = f.readlines()

    for line in lines:
        parts = line.strip().split(',')
        if len(parts) >= 2:
            host = parts[0].strip()
            try:
                port = int(parts[1].strip())
                proxies.append((socks.SOCKS5, host, port))
            except ValueError:
                continue

    if proxies:
        selected = random.choice(proxies)
        print(f"üîÄ –í—ã–±—Ä–∞–Ω —Å–ª—É—á–∞–π–Ω—ã–π –ø—Ä–æ–∫—Å–∏: {selected[1]}:{selected[2]}")
        return selected
    else:
        print("‚ö†Ô∏è –ü—Ä–æ–∫—Å–∏ –Ω–µ –Ω–∞–π–¥–µ–Ω—ã –∏–ª–∏ —Ñ–∞–π–ª –ø—É—Å—Ç. –ò—Å–ø–æ–ª—å–∑—É—é –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –±–µ–∑ –ø—Ä–æ–∫—Å–∏.")
        return None


async def list_chats(client):
    await client.start(phone_number)
    dialogs = await client.get_dialogs()
    output_lines = []

    for dialog in dialogs:
        entity = dialog.entity
        name = getattr(entity, 'title', None) or getattr(entity, 'first_name', 'Unknown')
        chat_id = entity.id

        if hasattr(entity, 'megagroup') and entity.megagroup:
            chat_type = '–°—É–ø–µ—Ä–≥—Ä—É–ø–ø–∞'
        elif hasattr(entity, 'broadcast') and entity.broadcast:
            chat_type = '–ö–∞–Ω–∞–ª'
        elif entity.id > 0:
            chat_type = '–õ–∏—á–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ'
        else:
            chat_type = '–ì—Ä—É–ø–ø–∞/–î—Ä—É–≥–æ–µ'

        output_lines.append(f"{name} ‚Äî ID: {chat_id} ‚Äî –¢–∏–ø: {chat_type}")

    with open("chat_list.txt", "w", encoding="utf-8") as f:
        f.write("\n".join(output_lines))

    print("‚úÖ –°–ø–∏—Å–æ–∫ —á–∞—Ç–æ–≤ —Å–æ—Ö—Ä–∞–Ω—ë–Ω –≤ —Ñ–∞–π–ª chat_list.txt")


async def forward_messages(client):
    await client.start(phone_number)

    target_peers = []
    for chat_id in target_chat_ids:
        try:
            peer = await client.get_entity(chat_id)
            target_peers.append(peer)
        except Exception as e:
            print(f"‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å entity –¥–ª—è {chat_id}: {e}")

    if not target_peers:
        print("‚ö†Ô∏è –ù–µ—Ç –¥–æ—Å—Ç—É–ø–Ω—ã—Ö —Ü–µ–ª–µ–≤—ã—Ö —á–∞—Ç–æ–≤ –¥–ª—è –ø–µ—Ä–µ—Å—ã–ª–∫–∏. –ó–∞–≤–µ—Ä—à–µ–Ω–∏–µ.")
        return

    @client.on(events.NewMessage(chats=source_chat_ids))
    async def handler(event):
        message = event.message
        for peer in target_peers:
            try:
                await asyncio.sleep(random.uniform(*delay_range))
                await client.send_message(peer, message)
                print(f"‚úÖ –°–æ–æ–±—â–µ–Ω–∏–µ –ø–µ—Ä–µ—Å–ª–∞–Ω–æ –≤ {peer.id}")
            except Exception as e:
                print(f"‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –ø–µ—Ä–µ—Å–ª–∞—Ç—å –≤ {peer.id}: {e}")

    print("üì° –°–∫—Ä–∏–ø—Ç –∑–∞–ø—É—â–µ–Ω. –û–∂–∏–¥–∞—é —Å–æ–æ–±—â–µ–Ω–∏—è...")
    await client.run_until_disconnected()


def main():
    proxy = load_random_proxy()
    client = TelegramClient(SESSION_NAME, api_id, api_hash, proxy=proxy)

    print("\n–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:")
    print("1. –ó–∞–ø—É—Å—Ç–∏—Ç—å –ø–µ—Ä–µ—Å—ã–ª–∫—É —Å–æ–æ–±—â–µ–Ω–∏–π")
    print("2. –°–æ—Ö—Ä–∞–Ω–∏—Ç—å —Å–ø–∏—Å–æ–∫ –≤—Å–µ—Ö —á–∞—Ç–æ–≤ –≤ chat_list.txt –∏ –≤—ã–π—Ç–∏")
    choice = input("–í–≤–µ–¥–∏—Ç–µ 1 –∏–ª–∏ 2: ").strip()

    try:
        with client:
            if choice == '1':
                client.loop.run_until_complete(forward_messages(client))
            elif choice == '2':
                client.loop.run_until_complete(list_chats(client))
            else:
                print("‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π –≤—ã–±–æ—Ä. –ó–∞–≤–µ—Ä—à–µ–Ω–∏–µ —Ä–∞–±–æ—Ç—ã.")
    except AuthKeyUnregisteredError:
        print("‚ùå –°–µ—Å—Å–∏—è Telegram –Ω–µ–¥–µ–π—Å—Ç–≤–∏—Ç–µ–ª—å–Ω–∞. –£–¥–∞–ª–µ–Ω–∏–µ —Å—Ç–∞—Ä–æ–π —Å–µ—Å—Å–∏–∏...")
        try:
            os.remove(f"{SESSION_NAME}.session")
            print("üîÅ –ü–æ–≤—Ç–æ—Ä–∏—Ç–µ –∑–∞–ø—É—Å–∫ —Å–∫—Ä–∏–ø—Ç–∞ ‚Äî –±—É–¥–µ—Ç –∑–∞–ø—Ä–æ—à–µ–Ω –∫–æ–¥ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è.")
        except Exception as e:
            print(f"‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å —É–¥–∞–ª–∏—Ç—å —Å–µ—Å—Å–∏—é: {e}")
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–ø—É—Å–∫–µ: {e}")


if __name__ == '__main__':
    main()
